# Production Deployment Workflow with Manual Deploy Test Support
name: Deploy Jekyll site to GitHub Pages

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Choose deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - test
        - staging
      skip_optimization:
        description: 'Skip asset optimization for faster testing'
        required: false
        default: false
        type: boolean
      run_lighthouse:
        description: 'Run performance audit after deployment'
        required: false
        default: true
        type: boolean

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        persist-credentials: true
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: false
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install Node dependencies
      run: |
        if [ -f package.json ] && [ -f package-lock.json ]; then
          npm ci
        else
          # Create package.json if it doesn't exist
          if [ ! -f package.json ]; then
            npm init -y
          fi
          # Install required packages for Jekyll optimization
          npm install --save-dev clean-css-cli terser imagemin-webp imagemin-cli lighthouse
          npm install -g jq
        fi
        
    - name: Install Ruby dependencies
      run: |
        gem install bundler
        bundle config set --local deployment false
        bundle config set --local path 'vendor/bundle'
        bundle install --retry 3
        
    - name: Build Jekyll site
      run: |
        bundle exec jekyll build --future --verbose
        
    - name: Optimize assets
      if: github.event.inputs.skip_optimization != 'true'
      run: |
        echo "üîß Optimizing assets for ${{ github.event.inputs.deploy_environment || 'production' }} deployment..."
        
        # Create optimized CSS if it doesn't exist
        if [ -f _site/assets/css/main.css ]; then
          npx clean-css-cli -o _site/assets/css/main.min.css _site/assets/css/main.css
          echo "‚úÖ CSS optimized"
        fi
        
        # Create optimized JavaScript files if they exist
        find _site/assets/js -name "*.js" -not -name "*.min.js" | while read jsfile; do
          if [ -f "$jsfile" ]; then
            minfile="${jsfile%.js}.min.js"
            npx terser "$jsfile" -c -m -o "$minfile" --ecma 2015
            echo "‚úÖ JavaScript optimized: $(basename "$jsfile")"
          fi
        done
        
        # Optimize images to WebP format
        if [ -d "_site/assets/img" ]; then
          npx imagemin '_site/assets/img/**' --out-dir='_site/assets/img' --plugin=imagemin-webp || echo "‚ö†Ô∏è Image optimization skipped"
          echo "‚úÖ Images optimized"
        fi
        
    - name: Skip optimization (Test mode)
      if: github.event.inputs.skip_optimization == 'true'
      run: |
        echo "‚ö° Skipping asset optimization for faster testing deployment..."
        
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./_site       
    
        
    - name: Deployment Summary
      run: |
        echo "üéâ Deployment completed successfully!"
        echo "üì¶ Environment: ${{ github.event.inputs.deploy_environment || 'production' }}"
        echo "‚ö° Asset optimization: ${{ github.event.inputs.skip_optimization == 'true' && 'Skipped' || 'Enabled' }}"
        echo "üîç Performance audit: ${{ github.event.inputs.run_lighthouse == 'false' && 'Skipped' || 'Enabled' }}"
        REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)
        GITHUB_PAGES_URL="https://${{ github.repository_owner }}.github.io/${REPO_NAME}"
        echo "üåê Site URL: $GITHUB_PAGES_URL"

# Environment variables for optimization
env:
  NODE_ENV: production
  JEKYLL_ENV: production
  BUNDLE_PATH: vendor/bundle
  BUNDLE_WITHOUT: 'development:test'
